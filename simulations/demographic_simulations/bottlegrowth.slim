// set up a bottlegrowth simulation
// theta (4 * Na * mu * L) = 10^4 
// L = 10^6 Mb
// Na = 10^3
// mu = 10,000 / (4 * 10^3 * 10^6) = 1 / 4e5

// the bottlegrowthed population size will be 250
// it will be given 0.4*Na generations to recover back to 1000 individuals

initialize() {
         initializeMutationRate(2.5e-6);
         
         // m1 mutation type: neutral
         initializeMutationType("m1", 0.5, "f", 0.0);
         
         // g1 genomic element type: uses m1 for all mutations
         initializeGenomicElementType("g1", m1, 1.0);
         
         // uniform chromosome of length 100 kb with uniform recombination
         initializeGenomicElement(g1, 0, 150);
         initializeRecombinationRate(1e-8);
}
                    
1 early() {
         sim.addSubpop("p1", 1000); 
         
         // selfingRate = 2 * Fis / (1 + Fis)
         p1.setSelfingRate(2 * asFloat(Fis) / (1 + asFloat(Fis)));
}

// after 10*Na = 10000 generation of burn-in, start the bottlegrowth+growth
10000:10400 late() {
         newSize = asInteger(250 * (1000 / 250) ^ ((sim.cycle-10000)/400));
         p1.setSubpopulationSize(newSize);
     }

10400 late() {
		  print("Sampling VCF file " + i + "...");
		  p1.outputVCFSample(ns, replace=T, outputMultiallelics=F,
		  filePath = "simulation_SLiM_bottlegrowth_rep_F_" + Fis + "_replicate" + i + "_prov.vcf");

}
